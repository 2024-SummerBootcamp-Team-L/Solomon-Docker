# Access 로그를 /var/log/nginx/access.log 파일에 남기도록 설정
#access_log /var/log/nginx/access.log; #도커내부 경로에 access_log라는 지시어를 사용해서 access.log 파일에 남기라는 말
#error_log /var/log/nginx/error.log debug;

# nginx에 백엔드 연결
upstream backend {
    server backend:8000;
}

server {
    listen 80;
    server_name solo-mon.site;
    charset utf-8;

    # SSL 인증서 발급을 자동화하는 Certbot을 사용하기 위한 설정
    location /.well-known/acme-challenge/ {
        allow all;
        root /var/www/certbot;
    }

    # Http로 들어온 요청을 Https로 Redirect
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name solo-mon.site;
    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/solo-mon.site/fullchain.pem;  # ssl 인증서 사용
    ssl_certificate_key /etc/letsencrypt/live/solo-mon.site/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    #Access 로그를 /var/log/nginx/access.log 파일에 남기도록 설정
    access_log /var/log/nginx/access.log; #도커내부 경로에 access_log라는 지시어를 사용해서 access.log 파일에 남기라는 말
    error_log /var/log/nginx/error.log debug;

    # 요청받은 uri로 연결
    location /api/ {
        proxy_pass http://backend;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    }

    # ignore cache frontend
    location ~* (service-worker\.js)$ {
        add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        expires off;
        proxy_no_cache 1;
    }

    location / {
        root    /var/www/frontend;
        #index   index.html;
        try_files $uri $uri/ /index.html;
    }
}
